{"version":3,"sources":["../src/lib/loading/load-archetype.ts","../src/lib/guards/is-unknown-field.ts","../src/lib/guards/is-array-field.ts","../src/lib/guards/is-boolean-field.ts","../src/lib/guards/is-date-field.ts","../src/lib/guards/is-number-field.ts","../src/lib/guards/is-object-field.ts","../src/lib/guards/is-string-field.ts","../src/lib/validation/validate-array-field.ts","../src/lib/validation/validate-boolean-field.ts","../src/lib/validation/validate-date-field.ts","../src/lib/validation/validate-number-field.ts","../src/lib/validation/validate-object-field.ts","../src/lib/validation/validate-string-field.ts","../src/lib/validation/validate-schema-field.ts","../src/lib/validation/validate-archetype.ts","../src/lib/bootstrap.ts"],"names":["join"],"mappings":"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","file":"index.js","sourcesContent":["import type { Archetype } from '$types/archetype.js';\nimport { readFile } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { parse } from 'yaml';\n\nconst loadArchetype: (name: string, path: string) => Promise<Archetype> = async (name, path) => {\n\tconst filename = join(path, `${name}.md`);\n\n\tconst text = await readFile(filename, 'utf-8');\n\tconst [, yaml] = text.split('---\\n');\n\n\tif (yaml) {\n\t\treturn parse(yaml) as Archetype;\n\t}\n\n\tthrow new Error('YAML content is missing in the file');\n};\n\nexport default loadArchetype;\n","import type { UnknownField } from '$types/schema-field.js';\n\nconst isUnknownField = (field: unknown): field is UnknownField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t'type' in field &&\n\ttypeof field.type === 'string';\n\nexport default isUnknownField;\n","import type { ArrayField } from '$types/schema-field.js';\nimport isUnknownField from './is-unknown-field.js';\n\nconst isArrayField = (field: unknown): field is ArrayField =>\n\tisUnknownField(field) && field.type === 'Array';\n\nexport default isArrayField;\n","import type { BooleanField } from '$types/schema-field.js';\nimport isUnknownField from './is-unknown-field.js';\n\nconst isBooleanField = (field: unknown): field is BooleanField =>\n\tisUnknownField(field) && field.type === 'Boolean';\n\nexport default isBooleanField;\n","import type { DateField } from '$types/schema-field.js';\nimport isUnknownField from './is-unknown-field.js';\n\nconst isDateField = (field: unknown): field is DateField =>\n\tisUnknownField(field) && field.type === 'Date';\n\nexport default isDateField;\n","import type { NumberField } from '$types/schema-field.js';\nimport isUnknownField from './is-unknown-field.js';\n\nconst isNumberField = (field: unknown): field is NumberField =>\n\tisUnknownField(field) && field.type === 'Number';\n\nexport default isNumberField;\n","import type { ObjectField } from '$types/schema-field.js';\nimport isUnknownField from './is-unknown-field.js';\n\nconst isObjectField = (field: unknown): field is ObjectField =>\n\tisUnknownField(field) && field.type === 'Object';\n\nexport default isObjectField;\n","import type { StringField } from '$types/schema-field.js';\nimport isUnknownField from './is-unknown-field.js';\n\nconst isStringField = (field: unknown): field is StringField =>\n\tisUnknownField(field) && field.type === 'String';\n\nexport default isStringField;\n","import type { ArrayField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateArrayField = (\n\tvalue: unknown,\n\tfield: ArrayField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (!Array.isArray(value)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected array, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.minItems !== undefined && value.length < field.minItems) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Array must contain at least ${field.minItems} items`\n\t\t});\n\t}\n\n\tif (field.maxItems !== undefined && value.length > field.maxItems) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Array must contain at most ${field.maxItems} items`\n\t\t});\n\t}\n\n\tvalue.forEach((item, index) => {\n\t\terrors.push(...validateSchemaField(item, field.items, [...path, index.toString()]));\n\t});\n\n\treturn errors;\n};\n\nexport default validateArrayField;\n","import type { BooleanField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateBooleanField = (\n\tvalue: unknown,\n\tfield: BooleanField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'boolean') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected boolean, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tvoid field;\n\n\treturn errors;\n};\n\nexport default validateBooleanField;\n","import type { DateField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateDateField = (\n\tvalue: unknown,\n\tfield: DateField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'string' || isNaN(Date.parse(value))) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: 'Invalid date format'\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.format === 'ISO-8601' && !/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/.test(value)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: 'Date must be in ISO-8601 format'\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateDateField;\n","import type { NumberField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateNumberField = (\n\tvalue: unknown,\n\tfield: NumberField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'number') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected number, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.min !== undefined && value < field.min) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be >= ${field.min}`\n\t\t});\n\t}\n\n\tif (field.max !== undefined && value > field.max) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be <= ${field.max}`\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateNumberField;\n","import type { ObjectField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateObjectField = (\n\tvalue: unknown,\n\tfield: ObjectField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected object, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tconst valueObj = value as Record<string, unknown>;\n\n\tfield.required?.forEach((requiredProp) => {\n\t\tif (!(requiredProp in valueObj)) {\n\t\t\terrors.push({\n\t\t\t\tpath: [...path, requiredProp],\n\t\t\t\tmessage: 'Required property missing'\n\t\t\t});\n\t\t}\n\t});\n\n\tif (field.properties) {\n\t\tObject.entries(field.properties).forEach(([key, propSchema]) => {\n\t\t\tif (key in valueObj) {\n\t\t\t\terrors.push(...validateSchemaField(valueObj[key], propSchema, [...path, key]));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateObjectField;\n","import type { StringField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateStringField = (\n\tvalue: unknown,\n\tfield: StringField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'string') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected string, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.enum && !field.enum.includes(value as string)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be one of: ${field.enum.join(', ')}`\n\t\t});\n\t}\n\n\tif (field.pattern && !new RegExp(field.pattern).test(value as string)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value does not match pattern: ${field.pattern}`\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateStringField;\n","import type { UnknownField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport isArrayField from '../guards/is-array-field.js';\nimport isBooleanField from '../guards/is-boolean-field.js';\nimport isDateField from '../guards/is-date-field.js';\nimport isNumberField from '../guards/is-number-field.js';\nimport isObjectField from '../guards/is-object-field.js';\nimport isStringField from '../guards/is-string-field.js';\nimport validateArrayField from './validate-array-field.js';\nimport validateBooleanField from './validate-boolean-field.js';\nimport validateDateField from './validate-date-field.js';\nimport validateNumberField from './validate-number-field.js';\nimport validateObjectField from './validate-object-field.js';\nimport validateStringField from './validate-string-field.js';\n\nconst validateSchemaField = (\n\tvalue: unknown,\n\tfield: UnknownField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tif (isStringField(field)) {\n\t\treturn validateStringField(value, field, path);\n\t} else if (isNumberField(field)) {\n\t\treturn validateNumberField(value, field, path);\n\t} else if (isBooleanField(field)) {\n\t\treturn validateBooleanField(value, field, path);\n\t} else if (isDateField(field)) {\n\t\treturn validateDateField(value, field, path);\n\t} else if (isArrayField(field)) {\n\t\treturn validateArrayField(value, field, path);\n\t} else if (isObjectField(field)) {\n\t\treturn validateObjectField(value, field, path);\n\t} else {\n\t\tthrow new Error(`Unknown field type: ${field.type}`);\n\t}\n};\n\nexport default validateSchemaField;\n","import type { Archetype } from '$types/archetype.js';\nimport type { SchemaField } from '$types/schema-field.js';\nimport type { ValidationResult } from '$types/validation-result.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateArchetype = (archetype: unknown, archetypeSchema: Archetype): ValidationResult => {\n\tconst errors: ValidationError[] = [];\n\n\tfor (const [fieldName, fieldSchema] of Object.entries(archetypeSchema.schema.required) as [\n\t\tstring,\n\t\tSchemaField\n\t][]) {\n\t\tconst value =\n\t\t\tarchetype && typeof archetype === 'object'\n\t\t\t\t? (archetype as Record<string, unknown>)[fieldName]\n\t\t\t\t: undefined;\n\n\t\tif (value === undefined) {\n\t\t\terrors.push({\n\t\t\t\tpath: [fieldName],\n\t\t\t\tmessage: 'Required field missing'\n\t\t\t});\n\t\t} else {\n\t\t\terrors.push(...validateSchemaField(value, fieldSchema, [fieldName]));\n\t\t}\n\t}\n\n\t// Then validate optional fields if present\n\tfor (const [fieldName, fieldSchema] of Object.entries(archetypeSchema.schema.optional) as [\n\t\tstring,\n\t\tSchemaField\n\t][]) {\n\t\tconst value =\n\t\t\tarchetype && typeof archetype === 'object'\n\t\t\t\t? (archetype as Record<string, unknown>)[fieldName]\n\t\t\t\t: undefined;\n\n\t\tif (value !== undefined) {\n\t\t\terrors.push(...validateSchemaField(value, fieldSchema, [fieldName]));\n\t\t}\n\t}\n\n\treturn {\n\t\tvalid: errors.length === 0,\n\t\terrors\n\t};\n};\n\nexport default validateArchetype;\n","import type { ArchetypeEngine } from '$types/archetype-engine.js';\nimport type { PathLike } from 'node:fs';\nimport { join } from 'node:path';\nimport { cwd } from 'node:process';\nimport loadArchetype from './loading/load-archetype.js';\nimport validateArchetype from './validation/validate-archetype.js';\n\ninterface BootstrapOptions {\n\t/**\n\t * The root directory to load archetypes from.\n\t */\n\troot?: PathLike;\n}\n\nconst bootstrap: (options?: BootstrapOptions) => Promise<ArchetypeEngine> = async ({\n\troot = join(cwd(), 'data', 'archetypes')\n} = {}) => {\n\tconst archetypeSchema = await loadArchetype('archetype', root.toString());\n\n\tconst { errors, valid } = validateArchetype(archetypeSchema, archetypeSchema);\n\n\tif (errors.length === 0 && valid) {\n\t\treturn {\n\t\t\tarchetypeSchema,\n\t\t\tloadArchetype: (name: string) => loadArchetype(name, root.toString()),\n\t\t\tvalidateArchetype: (archetype: unknown) => validateArchetype(archetype, archetypeSchema)\n\t\t};\n\t}\n\n\tthrow new Error('Invalid archetype schema', { cause: errors });\n};\n\nexport default bootstrap;\nexport type { BootstrapOptions };\n"]}