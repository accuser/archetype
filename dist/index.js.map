{"version":3,"sources":["../src/lib/loading/load-archetype.ts","../src/lib/validation/validate-array-field.ts","../src/lib/validation/validate-boolean-field.ts","../src/lib/validation/iso8601.ts","../src/lib/validation/validate-date-field.ts","../src/lib/validation/validate-number-field.ts","../src/lib/validation/validate-object-field.ts","../src/lib/validation/validate-string-field.ts","../src/lib/validation/validators.ts","../src/lib/validation/validate-schema-field.ts","../src/lib/validation/validate-archetype.ts","../src/lib/bootstrap.ts"],"names":["join"],"mappings":"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","file":"index.js","sourcesContent":["import type { Archetype } from '$types/archetype.js';\nimport { readFile } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { parse } from 'yaml';\n\nconst loadArchetype: (name: string, path: string) => Promise<Archetype> = async (name, path) => {\n\tconst filename = join(path, `${name}.md`);\n\n\tconst text = await readFile(filename, 'utf-8');\n\tconst [, yaml] = text.split('---\\n');\n\n\tif (yaml) {\n\t\treturn parse(yaml) as Archetype;\n\t}\n\n\tthrow new Error('YAML content is missing in the file');\n};\n\nexport default loadArchetype;\n","import type { ArrayField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateArrayField = (\n\tvalue: unknown,\n\tfield: ArrayField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (!Array.isArray(value)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected array, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.minItems !== undefined && value.length < field.minItems) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Array must contain at least ${field.minItems} items`\n\t\t});\n\t}\n\n\tif (field.maxItems !== undefined && value.length > field.maxItems) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Array must contain at most ${field.maxItems} items`\n\t\t});\n\t}\n\n\tvalue.forEach((item, index) => {\n\t\terrors.push(...validateSchemaField(item, field.items, [...path, index.toString()]));\n\t});\n\n\treturn errors;\n};\n\nexport default validateArrayField;\n","import type { BooleanField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateBooleanField = (\n\tvalue: unknown,\n\tfield: BooleanField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'boolean') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected boolean, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tvoid field;\n\n\treturn errors;\n};\n\nexport default validateBooleanField;\n","const ISO8601_FORMATS = {\n\tCALENDAR:\n\t\t/^(\\d{4})-([01]\\d)-([0-3]\\d)(?:T([012]\\d):([0-5]\\d):([0-5]\\d)(?:\\.(\\d+))?(Z|([+-])([01]\\d):([0-5]\\d))?)?$/,\n\tORDINAL: /^(\\d{4})-(\\d{3})$/,\n\tWEEK: /^(\\d{4})-W([0-5]\\d)(?:-([1-7]))?$/\n};\n\nconst parseWeekDate: (year: number, week: number, day?: number) => Date = (year, week, day = 1) => {\n\t// January 4th is always in week 1 per ISO-8601\n\tconst jan4th = new Date(year, 0, 4);\n\tconst startOfWeek1 = new Date(jan4th);\n\n\tstartOfWeek1.setDate(jan4th.getDate() - jan4th.getDay() + 1);\n\n\t// Calculate target date\n\tconst targetDate = new Date(startOfWeek1);\n\n\ttargetDate.setDate(startOfWeek1.getDate() + (week - 1) * 7 + (day - 1));\n\n\t// Validate the resulting year is correct\n\tif (targetDate.getFullYear() !== year) {\n\t\tthrow new Error('Invalid week date');\n\t}\n\n\treturn targetDate;\n};\n\nconst parseOrdinalDate: (year: number, ordinalDay: number) => Date = (year, ordinalDay) => {\n\tconst date = new Date(year, 0, 1);\n\n\tdate.setDate(ordinalDay);\n\n\t// Validate the resulting year is correct\n\tif (date.getFullYear() !== year) {\n\t\tthrow new Error('Invalid ordinal date');\n\t}\n\n\treturn date;\n};\n\nconst parseDate: (dateString: string) => Date = (dateString) => {\n\tconst dateMatch = dateString.match(ISO8601_FORMATS.CALENDAR);\n\n\tif (dateMatch) {\n\t\tconst [, y, m, d, h, min, s, ms, tz, o, hoff, minoff] = dateMatch;\n\n\t\tconst year = Number(y);\n\t\tconst month = Number(m);\n\t\tconst day = Number(d);\n\t\tconst hour = h ? Number(h) : 0;\n\t\tconst minute = min ? Number(min) : 0;\n\t\tconst second = s ? Number(s) : 0;\n\t\tconst millisecond = ms ? Number(ms) : 0;\n\t\tconst hourOffset = hoff ? Number(`${o}${hoff}`) : 0;\n\t\tconst minuteOffset = minoff ? Number(`${o}${minoff}`) : 0;\n\n\t\tconst date = new Date(dateString);\n\n\t\tif (date instanceof Date === false) {\n\t\t\tthrow new Error('Invalid calendar date');\n\t\t} else if (\n\t\t\tdate.getFullYear() !== year ||\n\t\t\tdate.getMonth() + 1 !== month ||\n\t\t\tdate.getDate() !== day ||\n\t\t\tdate.getHours() !== hour - hourOffset ||\n\t\t\tdate.getMinutes() !== minute - minuteOffset ||\n\t\t\tdate.getSeconds() !== second ||\n\t\t\tdate.getMilliseconds() !== millisecond\n\t\t) {\n\t\t\tthrow new Error('Invalid calendar date');\n\t\t} else {\n\t\t\treturn date;\n\t\t}\n\t}\n\n\tconst weekMatch = dateString.match(ISO8601_FORMATS.WEEK);\n\n\tif (weekMatch) {\n\t\tconst [, y, w, d] = weekMatch;\n\n\t\tconst year = Number(y);\n\t\tconst week = Number(w);\n\t\tconst day = d ? Number(d) : 1;\n\n\t\tif (week < 1 || week > 53) {\n\t\t\tthrow new Error('Invalid week number');\n\t\t}\n\n\t\tif (week === 53) {\n\t\t\tconst dec31 = new Date(year, 11, 31);\n\n\t\t\tconst lastWeek =\n\t\t\t\tMath.floor((dec31.getTime() - new Date(year, 0, 1).getTime()) / (86400000 * 7)) + 1;\n\n\t\t\tif (lastWeek !== 53) {\n\t\t\t\tthrow new Error('Invalid week number');\n\t\t\t}\n\t\t}\n\n\t\treturn parseWeekDate(year, week, day);\n\t}\n\n\tconst ordinalMatch = dateString.match(ISO8601_FORMATS.ORDINAL);\n\n\tif (ordinalMatch) {\n\t\tconst [, y, od] = ordinalMatch;\n\n\t\tconst year = Number(y);\n\t\tconst ordinalDay = Number(od);\n\n\t\t// Validate ordinal day number\n\t\tconst isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n\t\tconst maxDays = isLeapYear ? 366 : 365;\n\n\t\tif (ordinalDay < 1 || ordinalDay > maxDays) {\n\t\t\tthrow new Error('Invalid ordinal day number');\n\t\t}\n\n\t\treturn parseOrdinalDate(year, ordinalDay);\n\t}\n\n\tthrow new Error('Invalid ISO-8601 date format');\n};\n\nconst isValidDate: (dateString: string) => boolean = (date) => {\n\ttry {\n\t\treturn parseDate(date) instanceof Date;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport { isValidDate, parseDate };\n","import type { DateField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport { isValidDate } from './iso8601.js';\n\nconst validateDateField = (\n\tvalue: unknown,\n\tfield: DateField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'string' || isNaN(Date.parse(value))) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: 'Invalid date format'\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.format === 'ISO-8601' && isValidDate(value) === false) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: 'Date must be in ISO-8601 format'\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateDateField;\n","import type { NumberField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateNumberField = (\n\tvalue: unknown,\n\tfield: NumberField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'number') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected number, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.min !== undefined && value < field.min) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be >= ${field.min}`\n\t\t});\n\t}\n\n\tif (field.max !== undefined && value > field.max) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be <= ${field.max}`\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateNumberField;\n","import type { ObjectField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateObjectField = (\n\tvalue: unknown,\n\tfield: ObjectField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected object, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tconst valueObj = value as Record<string, unknown>;\n\n\tfield.required?.forEach((requiredProp) => {\n\t\tif (!(requiredProp in valueObj)) {\n\t\t\terrors.push({\n\t\t\t\tpath: [...path, requiredProp],\n\t\t\t\tmessage: 'Required property missing'\n\t\t\t});\n\t\t}\n\t});\n\n\tif (field.properties) {\n\t\tObject.entries(field.properties).forEach(([key, propSchema]) => {\n\t\t\tif (key in valueObj) {\n\t\t\t\terrors.push(...validateSchemaField(valueObj[key], propSchema, [...path, key]));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateObjectField;\n","import type { StringField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateStringField = (\n\tvalue: unknown,\n\tfield: StringField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'string') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected string, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.enum && !field.enum.includes(value as string)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be one of: ${field.enum.join(', ')}`\n\t\t});\n\t}\n\n\tif (field.pattern && !new RegExp(field.pattern).test(value as string)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value does not match pattern: ${field.pattern}`\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateStringField;\n","import type { SchemaFieldMap } from '$types/schema-field.js';\nimport type { ValidationError } from '$types/validation-error.js';\nimport validateArrayField from './validate-array-field.js';\nimport validateBooleanField from './validate-boolean-field.js';\nimport validateDateField from './validate-date-field.js';\nimport validateNumberField from './validate-number-field.js';\nimport validateObjectField from './validate-object-field.js';\nimport validateStringField from './validate-string-field.js';\n\ntype Validators = {\n\t[K in keyof SchemaFieldMap]: (\n\t\tvalue: unknown,\n\t\tfield: SchemaFieldMap[K],\n\t\tpath: string[]\n\t) => ValidationError[];\n};\n\nconst validators: Validators = {\n\tArray: validateArrayField,\n\tBoolean: validateBooleanField,\n\tDate: validateDateField,\n\tNumber: validateNumberField,\n\tObject: validateObjectField,\n\tString: validateStringField\n};\n\nexport default validators;\n","import type { SchemaField } from '$types/schema-field.js';\nimport type { ValidationError } from '$types/validation-error.js';\nimport validators from './validators.js';\n\nconst validateSchemaField: (\n\tvalue: unknown,\n\tfield: SchemaField,\n\tpath?: string[]\n) => ValidationError[] = (value, field, path = []) => {\n\tconst validator = validators[field.type];\n\n\tif (validator) {\n\t\treturn validator(value, field as any, path);\n\t}\n\n\tthrow new Error(`No validator found for type: ${field.type}`);\n};\n\nexport default validateSchemaField;\n","import type { Archetype } from '$types/archetype.js';\nimport type { SchemaField } from '$types/schema-field.js';\nimport type { ValidationResult } from '$types/validation-result.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateArchetype = (archetype: unknown, archetypeSchema: Archetype): ValidationResult => {\n\tconst errors: ValidationError[] = [];\n\n\tfor (const [fieldName, fieldSchema] of Object.entries(archetypeSchema.schema.required) as [\n\t\tstring,\n\t\tSchemaField\n\t][]) {\n\t\tconst value =\n\t\t\tarchetype && typeof archetype === 'object'\n\t\t\t\t? (archetype as Record<string, unknown>)[fieldName]\n\t\t\t\t: undefined;\n\n\t\tif (value === undefined) {\n\t\t\terrors.push({\n\t\t\t\tpath: [fieldName],\n\t\t\t\tmessage: 'Required field missing'\n\t\t\t});\n\t\t} else {\n\t\t\terrors.push(...validateSchemaField(value, fieldSchema, [fieldName]));\n\t\t}\n\t}\n\n\t// Then validate optional fields if present\n\tfor (const [fieldName, fieldSchema] of Object.entries(archetypeSchema.schema.optional) as [\n\t\tstring,\n\t\tSchemaField\n\t][]) {\n\t\tconst value =\n\t\t\tarchetype && typeof archetype === 'object'\n\t\t\t\t? (archetype as Record<string, unknown>)[fieldName]\n\t\t\t\t: undefined;\n\n\t\tif (value !== undefined) {\n\t\t\terrors.push(...validateSchemaField(value, fieldSchema, [fieldName]));\n\t\t}\n\t}\n\n\treturn {\n\t\tvalid: errors.length === 0,\n\t\terrors\n\t};\n};\n\nexport default validateArchetype;\n","import type { ArchetypeEngine } from '$types/archetype-engine.js';\nimport type { PathLike } from 'node:fs';\nimport { join } from 'node:path';\nimport { cwd } from 'node:process';\nimport loadArchetype from './loading/load-archetype.js';\nimport validateArchetype from './validation/validate-archetype.js';\n\ninterface BootstrapOptions {\n\t/**\n\t * The root directory to load archetypes from.\n\t */\n\troot?: PathLike;\n}\n\nconst bootstrap: (options?: BootstrapOptions) => Promise<ArchetypeEngine> = async ({\n\troot = join(cwd(), 'data', 'archetypes')\n} = {}) => {\n\tconst archetypeSchema = await loadArchetype('archetype', root.toString());\n\n\tconst { errors, valid } = validateArchetype(archetypeSchema, archetypeSchema);\n\n\tif (errors.length === 0 && valid) {\n\t\treturn {\n\t\t\tarchetypeSchema,\n\t\t\tloadArchetype: (name: string) => loadArchetype(name, root.toString()),\n\t\t\tvalidateArchetype: (archetype: unknown) => validateArchetype(archetype, archetypeSchema)\n\t\t};\n\t}\n\n\tthrow new Error('Invalid archetype schema', { cause: errors });\n};\n\nexport default bootstrap;\nexport type { BootstrapOptions };\n"]}